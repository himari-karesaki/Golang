package main

import "fmt"

func main() {
	// makeでスライスを作成 型、長さ、容量　スライスは可変長配列　　容量をあらかじめメモリを確保しておく　キャパシティは大体どれぐらいきそうってくらいで決めてる
	//絶えず増えるデータは1秒あたり受け取るデータ量がわかっている場合はキャパシティを指定する
	//一定時間いったらデータを破棄するように処理する
	//ストリーミングでは時間、それ以外は大体の容量をみてキャパシティを決める
	//基本的にはmake関数を使うと良い　スライスを作成していることがわかりやすい
	slice1 := make([]int, 5, 10)
	fmt.Println(slice1) // [0 0 0 0 0]

	// スライスリテラルで作成
	slice2 := []int{1, 2, 3, 4, 5}
	fmt.Println(slice2) // [1 2 3 4 5]

	// 配列からスライスを作成
	arr := [5]int{1, 2, 3, 4, 5}
	slice3 := arr[1:4]  //配列から部分的にスライスを作成する　配列の第一要素からだい４要素の手前までのスライスが作成されるこれでいうと、2,3,4
	fmt.Println(slice3) // [2 3 4]

	// 既存のスライスから新しいスライスを作成
	subSlice1 := slice2[2:]
	fmt.Println(subSlice1) // [3 4 5]
	subSlice2 := slice2[:3]
	fmt.Println(subSlice2) // [1 2 3]
}
